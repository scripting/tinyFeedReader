<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Fri, 27 Jun 2025 13:54:23 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes https://drummer.land. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: tinyFeedReader</title>
		<dateCreated>Thu, 26 Jun 2025 20:47:00 GMT</dateCreated>
		<dateModified>Fri, 27 Jun 2025 13:54:22 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 3, 4, 9, 14, 23, 46, 48, 49, 53, 56, 64</expansionState>
		<vertScrollState>24</vertScrollState>
		<windowTop>92</windowTop>
		<windowLeft>585</windowLeft>
		<windowBottom>1021</windowBottom>
		<windowRight>1908</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/tinyfeedreader/" created="Tue, 16 Jan 2024 16:15:33 GMT">
			<outline text="worknotes.md" created="Sun, 18 Jun 2023 16:13:00 GMT">
				<outline text="#### 6/26/25; 4:47:23 PM by DW" created="Tue, 25 Feb 2025 22:42:17 GMT">
					<outline text="Started. Cribbed from of feedToMasto. I've always wanted a little feed reader that didn't depend on FeedLand and the websockets interface. Sometimes it's overkill. " created="Thu, 26 Jun 2025 20:47:23 GMT"/>
					<outline text="Stores all its data in stats.json in the same folder as the app by default, but is configurable. " created="Thu, 26 Jun 2025 20:51:49 GMT"/>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;tinyfeedreader&quot;,"/>
					<outline text="&quot;description&quot;: &quot;A minimal feed reader in a Node package.&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;main&quot;: &quot;tinyfeedreader.js&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;reallysimple&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="tinyfeedreader.js" created="Sun, 14 Jul 2024 15:43:38 GMT">
				<outline text="const myProductName = &quot;tinyFeedReader&quot;, myVersion = &quot;0.4.0&quot;; " created="Sun, 20 Apr 2025 20:00:01 GMT"/>
				<outline text="" created="Sun, 20 Apr 2025 20:00:01 GMT"/>
				<outline text="exports.start = tinyFeedReader; "/>
				<outline text="" created="Thu, 26 Jun 2025 20:51:14 GMT"/>
				<outline text="const fs = require (&quot;fs&quot;);" created="Sat, 05 Mar 2022 17:19:07 GMT"/>
				<outline text="const utils = require (&quot;daveutils&quot;); "/>
				<outline text="const reallysimple = require (&quot;reallysimple&quot;);"/>
				<outline text="" created="Thu, 26 Jun 2025 15:05:55 GMT"/>
				<outline text="function tinyFeedReader (userOptions) {" created="Thu, 26 Jun 2025 15:05:55 GMT">
					<outline text="var options = {" created="Thu, 26 Jun 2025 15:07:50 GMT">
						<outline text="enabled: true," created="Thu, 26 Jun 2025 15:10:43 GMT"/>
						<outline text="feedUrls: new Array ()," created="Thu, 26 Jun 2025 15:08:13 GMT"/>
						<outline text="secsBetwChecks: 60," created="Thu, 26 Jun 2025 15:07:59 GMT"/>
						<outline text="fnameStats: &quot;stats.json&quot;," created="Thu, 26 Jun 2025 20:52:38 GMT"/>
						<outline text="maxGuids: 2500, //we don't store the guids forever, after we have this number of guids, we start deleting the oldest ones" created="Tue, 29 Nov 2022 17:47:14 GMT"/>
						<outline text="flOnlyPostNewItems: true," created="Thu, 26 Jun 2025 15:26:49 GMT"/>
						<outline text="newItemCallback: function (feedUrl, theItem) {" created="Thu, 26 Jun 2025 15:29:33 GMT">
							<outline text="console.log (nowString () + &quot;: newItemCallback: feedUrl == &quot; + feedUrl + &quot;, theItem == &quot; + utils.jsonStringify (theItem));" created="Thu, 26 Jun 2025 15:29:57 GMT"/>
							<outline text="}" created="Thu, 26 Jun 2025 15:29:53 GMT"/>
							</outline>
						<outline text="}" created="Thu, 26 Jun 2025 15:07:57 GMT"/>
						</outline>
					<outline text="utils.mergeOptions (userOptions, options);" created="Thu, 26 Jun 2025 15:10:09 GMT"/>
					<outline text="" created="Thu, 26 Jun 2025 15:22:28 GMT"/>
					<outline text="var stats = {" created="Mon, 28 Nov 2022 23:28:06 GMT">
						<outline text="ctStarts: 0, whenLastStart: new Date (0)," created="Fri, 27 Jun 2025 13:25:21 GMT"/>
						<outline text="ctItemsSeen: 0, whenLastItem: new Date (0)," created="Fri, 27 Jun 2025 13:25:21 GMT"/>
						<outline text="ctNewItems: 0, whenLastNewItem: new Date (0)," created="Fri, 27 Jun 2025 13:25:32 GMT"/>
						<outline text="ctDeletedItems: 0, whenLastDeletedItem: new Date (0)," created="Fri, 27 Jun 2025 13:26:32 GMT"/>
						<outline text="guids: new Object ()" created="Mon, 28 Nov 2022 23:28:16 GMT"/>
						<outline text="};" created="Mon, 28 Nov 2022 23:28:12 GMT"/>
						</outline>
					<outline text="" created="Thu, 26 Jun 2025 20:51:43 GMT"/>
					<outline text="var flStatsChanged = false, whenLastCheck = new Date (0);" created="Mon, 28 Nov 2022 23:30:42 GMT"/>
					<outline text="" created="Thu, 26 Jun 2025 15:11:07 GMT"/>
					<outline text="function nowString () {" created="Mon, 26 May 2025 14:21:57 GMT">
						<outline text="return (new Date ().toLocaleTimeString ());" created="Mon, 26 May 2025 14:22:04 GMT"/>
						<outline text="}" created="Mon, 26 May 2025 14:22:07 GMT"/>
						</outline>
					<outline text="function statsChanged () {" created="Mon, 28 Nov 2022 23:32:35 GMT">
						<outline text="flStatsChanged = true;" created="Mon, 28 Nov 2022 23:32:47 GMT"/>
						<outline text="}" created="Mon, 28 Nov 2022 23:32:40 GMT"/>
						</outline>
					<outline text="function writeStats () {" created="Wed, 30 Nov 2022 15:47:36 GMT">
						<outline text="fs.writeFile (options.fnameStats, utils.jsonStringify (stats), function (err) {" created="Mon, 28 Nov 2022 23:30:59 GMT">
							<outline text="});" created="Mon, 28 Nov 2022 23:31:31 GMT"/>
							</outline>
						<outline text="}" created="Wed, 30 Nov 2022 15:47:44 GMT"/>
						</outline>
					<outline text="function deleteOldGuids () {" created="Wed, 30 Nov 2022 15:32:57 GMT">
						<outline text="function countGuids () {" created="Wed, 30 Nov 2022 15:34:23 GMT">
							<outline text="var ct = 0;" created="Wed, 30 Nov 2022 15:34:50 GMT"/>
							<outline text="for (var x in stats.guids) {" created="Wed, 30 Nov 2022 15:35:01 GMT">
								<outline text="ct++" created="Wed, 30 Nov 2022 15:35:01 GMT"/>
								<outline text="}" created="Wed, 30 Nov 2022 15:35:03 GMT"/>
								</outline>
							<outline text="return (ct);" created="Wed, 30 Nov 2022 15:34:53 GMT"/>
							<outline text="}" created="Wed, 30 Nov 2022 15:34:28 GMT"/>
							</outline>
						<outline text="function deleteOldestGuid () {" created="Wed, 30 Nov 2022 15:25:15 GMT">
							<outline text="var oldestWhen = new Date (), oldestx;" created="Wed, 30 Nov 2022 15:27:07 GMT"/>
							<outline text="function dateLessThan (d1, d2) {">
								<outline text="return (new Date (d1) &lt; new Date (d2));"/>
								<outline text="}"/>
								</outline>
							<outline text="for (var x in stats.guids) {" created="Wed, 30 Nov 2022 15:26:36 GMT">
								<outline text="var theGuid = stats.guids [x];" created="Wed, 30 Nov 2022 15:28:05 GMT"/>
								<outline text="if (dateLessThan (theGuid.when, oldestWhen)) {" created="Wed, 30 Nov 2022 15:28:15 GMT">
									<outline text="oldestWhen = theGuid.when;" created="Wed, 30 Nov 2022 15:28:34 GMT"/>
									<outline text="oldestx = x;" created="Wed, 30 Nov 2022 15:28:41 GMT"/>
									<outline text="}" created="Wed, 30 Nov 2022 15:28:46 GMT"/>
									</outline>
								<outline text="}" created="Wed, 30 Nov 2022 15:27:03 GMT"/>
								</outline>
							<outline text="if (oldestx !== undefined) {" created="Wed, 30 Nov 2022 15:29:03 GMT">
								<outline text="delete stats.guids [oldestx];" created="Wed, 30 Nov 2022 15:29:16 GMT"/>
								<outline text="stats.ctDeletedItems++; stats.whenLastDeletedItem = new Date ();" created="Fri, 27 Jun 2025 13:29:12 GMT"/>
								<outline text="statsChanged ();" created="Wed, 30 Nov 2022 15:45:47 GMT"/>
								<outline text="}" created="Wed, 30 Nov 2022 15:29:37 GMT"/>
								</outline>
							<outline text="}" created="Wed, 30 Nov 2022 15:26:35 GMT"/>
							</outline>
						<outline text="var ct = countGuids () - options.maxGuids;" created="Wed, 30 Nov 2022 15:27:20 GMT"/>
						<outline text="if (ct &gt; 0) {" created="Wed, 30 Nov 2022 15:31:41 GMT">
							<outline text="console.log (&quot;deleteOldGuids: ct == &quot; + ct);" created="Wed, 30 Nov 2022 15:31:45 GMT"/>
							<outline text="for (var i = 1; i &lt;= ct; i++) {" created="Wed, 30 Nov 2022 15:29:53 GMT">
								<outline text="deleteOldestGuid ();" created="Wed, 30 Nov 2022 15:30:24 GMT"/>
								<outline text="}" created="Wed, 30 Nov 2022 15:30:19 GMT"/>
								</outline>
							<outline text="}" created="Wed, 30 Nov 2022 15:31:59 GMT"/>
							</outline>
						<outline text="}" created="Wed, 30 Nov 2022 15:33:03 GMT"/>
						</outline>
					<outline text="function isNewFeed (feedUrl) {" created="Tue, 29 Nov 2022 17:59:27 GMT">
						<outline text="var flnew = true;" created="Tue, 29 Nov 2022 18:00:31 GMT"/>
						<outline text="for (var x in stats.guids) {" created="Tue, 29 Nov 2022 17:59:47 GMT">
							<outline text="if (stats.guids [x].feedUrl == feedUrl) {" created="Tue, 29 Nov 2022 17:59:58 GMT">
								<outline text="flnew = false;" created="Tue, 29 Nov 2022 18:00:42 GMT"/>
								<outline text="break;" created="Tue, 29 Nov 2022 18:00:46 GMT"/>
								<outline text="}" created="Tue, 29 Nov 2022 18:00:26 GMT"/>
								</outline>
							<outline text="}" created="Tue, 29 Nov 2022 17:59:52 GMT"/>
							</outline>
						<outline text="return (flnew);" created="Tue, 29 Nov 2022 18:00:57 GMT"/>
						<outline text="}" created="Tue, 29 Nov 2022 17:59:35 GMT"/>
						</outline>
					<outline text="function checkFeed (feedUrl, callback) {" created="Mon, 28 Nov 2022 23:05:38 GMT">
						<outline text="const now = new Date ();" created="Fri, 27 Jun 2025 13:27:10 GMT"/>
						<outline text="console.log (nowString () + &quot;: checkFeed: feedUrl == &quot; + feedUrl);" isComment="true" created="Mon, 28 Nov 2022 23:13:34 GMT"/>
						<outline text="const flNewFeed = isNewFeed (feedUrl);" created="Tue, 29 Nov 2022 18:01:13 GMT"/>
						<outline text="var flPost = (flNewFeed &amp;&amp; options.flOnlyPostNewItems) ? false : true;" isComment="true" created="Tue, 29 Nov 2022 18:04:25 GMT"/>
						<outline text="reallysimple.readFeed (feedUrl, function (err, theFeed) {" created="Sat, 19 Mar 2022 15:14:01 GMT">
							<outline text="if (err) {" created="Sat, 19 Mar 2022 15:15:11 GMT">
								<outline text="callback (err);" created="Sat, 19 Mar 2022 15:15:16 GMT"/>
								<outline text="}" created="Sat, 19 Mar 2022 15:15:20 GMT"/>
								</outline>
							<outline text="else {" created="Sat, 19 Mar 2022 15:15:21 GMT">
								<outline text="theFeed.items.forEach (function (item) {" created="Mon, 28 Nov 2022 23:19:30 GMT">
									<outline text="if (item.guid !== undefined) { //we ignore items without guids" created="Mon, 28 Nov 2022 23:33:13 GMT">
										<outline text="var flfound = false;" created="Mon, 28 Nov 2022 23:34:32 GMT"/>
										<outline text="for (var x in stats.guids) {" created="Tue, 29 Nov 2022 17:56:37 GMT">
											<outline text="if (x == item.guid) {" created="Mon, 28 Nov 2022 23:35:02 GMT">
												<outline text="flfound = true;" created="Mon, 28 Nov 2022 23:35:09 GMT"/>
												<outline text="break;" created="Tue, 29 Nov 2022 17:57:04 GMT"/>
												<outline text="}" created="Mon, 28 Nov 2022 23:35:12 GMT"/>
												</outline>
											<outline text="}" created="Tue, 29 Nov 2022 17:56:45 GMT"/>
											</outline>
										<outline text="if (!flfound) {" created="Mon, 28 Nov 2022 23:35:26 GMT">
											<outline text="stats.guids [item.guid] = {" created="Tue, 29 Nov 2022 17:52:30 GMT">
												<outline text="when: new Date ()," created="Tue, 29 Nov 2022 17:53:26 GMT"/>
												<outline text="feedUrl" created="Tue, 29 Nov 2022 17:53:40 GMT"/>
												<outline text="};" created="Tue, 29 Nov 2022 17:53:12 GMT"/>
												</outline>
											<outline text="stats.ctItemsSeen++; stats.whenLastItem = now;" created="Fri, 27 Jun 2025 13:27:42 GMT"/>
											<outline text="if (flNewFeed &amp;&amp; options.flOnlyPostNewItems) {" created="Fri, 27 Jun 2025 13:21:21 GMT">
												<outline text=" //don't add items from a newly-added feed" created="Fri, 27 Jun 2025 13:23:28 GMT"/>
												<outline text="}" created="Fri, 27 Jun 2025 13:21:39 GMT"/>
												</outline>
											<outline text="else {" created="Fri, 27 Jun 2025 13:21:40 GMT">
												<outline text="options.newItemCallback (feedUrl, item);" created="Thu, 26 Jun 2025 15:30:45 GMT"/>
												<outline text="stats.ctNewItems++; stats.whenLastNewItem = now;" created="Fri, 27 Jun 2025 13:27:42 GMT"/>
												<outline text="mastoPostNewItem (item);" isComment="true" created="Mon, 28 Nov 2022 23:39:23 GMT"/>
												<outline text="blueskyPostNewItem (item); //5/12/23 by DW" isComment="true" created="Fri, 12 May 2023 13:04:22 GMT"/>
												<outline text="wordpressPostNewItem (item); //5/14/23 by DW" isComment="true"/>
												<outline text="saveItemForDebugging (item);  //5/12/23 by DW" isComment="true" created="Fri, 12 May 2023 14:48:26 GMT"/>
												<outline text="}" created="Fri, 27 Jun 2025 13:21:42 GMT"/>
												</outline>
											<outline text="statsChanged ();" created="Mon, 28 Nov 2022 23:35:55 GMT"/>
											<outline text="}" created="Mon, 28 Nov 2022 23:35:30 GMT"/>
											</outline>
										<outline text="}" created="Mon, 28 Nov 2022 23:33:50 GMT"/>
										</outline>
									<outline text="});" created="Mon, 28 Nov 2022 23:19:54 GMT"/>
									</outline>
								<outline text="}" created="Sat, 19 Mar 2022 15:15:23 GMT"/>
								</outline>
							<outline text="});" created="Sat, 19 Mar 2022 15:15:01 GMT"/>
							</outline>
						<outline text="}" created="Mon, 28 Nov 2022 23:05:53 GMT"/>
						</outline>
					<outline text="function checkAllFeeds () {" created="Thu, 26 Jun 2025 20:36:27 GMT">
						<outline text="if (options.enabled) {" created="Thu, 26 Jun 2025 15:19:55 GMT">
							<outline text="whenLastCheck = new Date ();" created="Thu, 26 Jun 2025 15:19:17 GMT"/>
							<outline text="options.feedUrls.forEach (function (feedUrl) {" created="Mon, 28 Nov 2022 23:10:39 GMT">
								<outline text="checkFeed (feedUrl, function (err, data) {" created="Mon, 28 Nov 2022 23:11:03 GMT">
									<outline text="if (err) {" created="Mon, 28 Nov 2022 23:11:35 GMT">
										<outline text="console.log (&quot;checkFeed: feedUrl == &quot; +feedUrl + &quot;, err.message == &quot; + err.message);" created="Mon, 28 Nov 2022 23:11:45 GMT"/>
										<outline text="}" created="Mon, 28 Nov 2022 23:11:38 GMT"/>
										</outline>
									<outline text="});" created="Mon, 28 Nov 2022 23:11:27 GMT"/>
									</outline>
								<outline text="});" created="Mon, 28 Nov 2022 23:10:57 GMT"/>
								</outline>
							<outline text="}" created="Thu, 26 Jun 2025 15:19:56 GMT"/>
							</outline>
						<outline text="}" created="Thu, 26 Jun 2025 20:36:33 GMT"/>
						</outline>
					<outline text="function everySecond () {" created="Tue, 22 Apr 2025 18:54:49 GMT">
						<outline text="if (flStatsChanged) {" created="Mon, 28 Nov 2022 23:30:53 GMT">
							<outline text="flStatsChanged = false;" created="Mon, 28 Nov 2022 23:30:56 GMT"/>
							<outline text="writeStats ();" created="Wed, 30 Nov 2022 15:47:54 GMT"/>
							<outline text="}" created="Mon, 28 Nov 2022 23:31:43 GMT"/>
							</outline>
						<outline text="}" created="Tue, 22 Apr 2025 18:54:57 GMT"/>
						</outline>
					<outline text="function everyMinute () {" created="Thu, 26 Jun 2025 20:35:28 GMT">
						<outline text="if (options.enabled) {" created="Thu, 26 Jun 2025 15:19:55 GMT">
							<outline text="if (utils.secondsSince (whenLastCheck) &gt;= options.secsBetwChecks) {" created="Thu, 26 Jun 2025 15:18:04 GMT">
								<outline text="checkAllFeeds ();" created="Thu, 26 Jun 2025 20:37:19 GMT"/>
								<outline text="}" created="Thu, 26 Jun 2025 15:18:42 GMT"/>
								</outline>
							<outline text="}" created="Thu, 26 Jun 2025 15:19:56 GMT"/>
							</outline>
						<outline text="}" created="Thu, 26 Jun 2025 20:35:35 GMT"/>
						</outline>
					<outline text="" created="Fri, 27 Jun 2025 13:18:15 GMT"/>
					<outline text="console.log (nowString () + &quot;: tinyFeedReader startup.&quot;)" created="Thu, 26 Jun 2025 20:55:32 GMT"/>
					<outline text="utils.readConfig (options.fnameStats, stats, function (err) {" created="Thu, 26 Jun 2025 20:53:53 GMT">
						<outline text="if (err) {" created="Fri, 27 Jun 2025 13:19:02 GMT">
							<outline text="console.log (&quot;tinyFeedReader: Error reading &quot; + options.fnameStats + &quot; == &quot; + err.message);" created="Fri, 27 Jun 2025 13:19:05 GMT"/>
							<outline text="}" created="Fri, 27 Jun 2025 13:30:35 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 27 Jun 2025 13:30:36 GMT">
							<outline text="stats.ctStarts++; stats.whenLastStart = new Date ();" created="Fri, 27 Jun 2025 13:27:42 GMT"/>
							<outline text="checkAllFeeds (); //check immediately on startup, don't wait for the top of the minute" created="Thu, 26 Jun 2025 20:37:19 GMT"/>
							<outline text="whenLastCheck = new Date (0); //make sure we check again at the top of the minute" created="Thu, 26 Jun 2025 20:41:03 GMT"/>
							<outline text="utils.runEveryMinute (everyMinute);" created="Wed, 05 May 2021 02:42:28 GMT"/>
							<outline text="setInterval (everySecond, 1000); "/>
							<outline text="}" created="Fri, 27 Jun 2025 13:30:38 GMT"/>
							</outline>
						<outline text="});" created="Thu, 26 Jun 2025 20:54:57 GMT"/>
						</outline>
					<outline text="}" created="Thu, 26 Jun 2025 15:06:04 GMT"/>
					</outline>
				<outline text="" created="Fri, 27 Jun 2025 13:42:54 GMT"/>
				<outline text="" created="Fri, 27 Jun 2025 13:43:25 GMT"/>
				</outline>
			<outline text="readme.md" created="Thu, 26 Jun 2025 21:11:18 GMT">
				<outline text="# tinyFeedReader" created="Thu, 26 Jun 2025 21:11:20 GMT">
					<outline text="A minimal feed reader in a Node package." created="Thu, 26 Jun 2025 21:11:27 GMT"/>
					</outline>
				<outline text="### How to" created="Thu, 26 Jun 2025 21:17:02 GMT">
					<outline text="Specify at least these three properties of the options object, and then call tinyfeedreader.start." created="Thu, 26 Jun 2025 21:17:07 GMT">
						<outline text="1. feedUrls: an array of URLs of feeds to check." created="Thu, 26 Jun 2025 21:19:03 GMT"/>
						<outline text="2. newItemCallback: a function that's called when a new item is received. " created="Thu, 26 Jun 2025 21:19:17 GMT"/>
						<outline text="3. secsBetwChecks: determines how often we check the feeds, will never check more frequently than once a minute. " created="Thu, 26 Jun 2025 21:23:13 GMT"/>
						</outline>
					</outline>
				<outline text="### What's in an item?" created="Fri, 27 Jun 2025 13:39:31 GMT">
					<outline text="An example. Note this item does not have a title. " created="Fri, 27 Jun 2025 13:52:50 GMT"/>
					<outline text="&lt;%includeExample (&quot;whatIsAnItem&quot;)%&gt;"/>
					</outline>
				<outline text="### New features?" created="Thu, 26 Jun 2025 21:24:15 GMT">
					<outline text="You probably shouldn't ask for new features given the name of the project. :-)" created="Thu, 26 Jun 2025 21:24:23 GMT"/>
					<outline text="But you can download the code and do whatever you like. It's a good place to get started with feed reading." created="Thu, 26 Jun 2025 21:24:35 GMT"/>
					</outline>
				<outline text="### What kinds of feeds?" created="Thu, 26 Jun 2025 21:24:52 GMT">
					<outline text="It uses the &lt;a href=&quot;https://github.com/scripting/reallysimple&quot;&gt;reallySimple package&lt;/a&gt; to read feeds which in turn uses the &lt;a href=&quot;https://github.com/danmactough/node-feedparser&quot;&gt;feedParser package&lt;/a&gt;, so we read the same feeds they do, which is a lot of them in all kinds of formats. But you will get a JavaScript object that flattens out all the differences. " created="Thu, 26 Jun 2025 21:24:58 GMT"/>
					<outline text="If an item doesn't have a guid, we can't deal with it, and will never return it back to the caller. We use the guid to determine if an item is new or not. So we not only depend on its existence, we also depend on its uniqueness. " created="Fri, 27 Jun 2025 11:49:39 GMT"/>
					</outline>
				<outline text="### All data stored in memory" created="Fri, 27 Jun 2025 11:50:46 GMT">
					<outline text="We don't use a database, all the information about the items we've seen is stored in memory and saved to disk in a JSON file, stats.json. You can override the file path, by specifying its value in your options object, so you can store the stats file anywhere you like. " created="Fri, 27 Jun 2025 11:50:50 GMT"/>
					</outline>
				</outline>
			<outline text="" created="Thu, 26 Jun 2025 20:57:57 GMT"/>
			<outline text="demo/package.json" created="Thu, 26 Jun 2025 20:58:23 GMT">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;demo&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Test app for tinyFeedReader package.&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;main&quot;: &quot;demo.js&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;reallysimple&quot;: &quot;*&quot;,"/>
						<outline text="&quot;tinyfeedreader&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="demo/demo.js" created="Thu, 26 Jun 2025 20:57:58 GMT">
				<outline text="const tinyfeedreader = require (&quot;../tinyfeedreader.js&quot;);" created="Thu, 26 Jun 2025 20:58:30 GMT"/>
				<outline text="" created="Fri, 27 Jun 2025 11:47:47 GMT"/>
				<outline text="//6/27/25 by DW" created="Fri, 27 Jun 2025 11:47:47 GMT">
					<outline text="//this app reads three feeds once a minute, and calls newItemCallback when an item arrives in one of them." created="Fri, 27 Jun 2025 11:47:51 GMT"/>
					<outline text="//feedUrl, one of the parameters to newItemCallback, tells you which feed the item came from. " created="Fri, 27 Jun 2025 11:48:23 GMT"/>
					<outline text="//theItem, the other parameter, is an object that contains  the information we have about the item." created="Fri, 27 Jun 2025 11:48:49 GMT"/>
					</outline>
				<outline text="" created="Thu, 26 Jun 2025 20:59:38 GMT"/>
				<outline text="const options = {" created="Thu, 26 Jun 2025 15:34:51 GMT">
					<outline text="feedUrls: [" created="Thu, 26 Jun 2025 15:08:13 GMT">
						<outline text="&quot;https://dave.linkblog.org/&quot;, //new linkblog, want to completely switch to this" created="Fri, 27 Jun 2025 11:44:34 GMT"/>
						<outline text="&quot;http://scripting.com/rss.xml&quot;, //the longest continually updated RSS feed in the known universe" created="Fri, 27 Jun 2025 11:44:39 GMT"/>
						<outline text="&quot;http://data.feedland.org/feeds/davewiner.xml&quot; //old linkblog, still works" created="Fri, 27 Jun 2025 11:44:42 GMT"/>
						<outline text="]," created="Fri, 27 Jun 2025 11:44:46 GMT"/>
						</outline>
					<outline text="secsBetwChecks: 60," created="Thu, 26 Jun 2025 15:07:59 GMT"/>
					<outline text="maxGuids: 100, //small number for testing, in general it's better to use the default of 2500" created="Tue, 29 Nov 2022 17:47:14 GMT"/>
					<outline text="newItemCallback: function (feedUrl, theItem) {" created="Thu, 26 Jun 2025 15:29:33 GMT">
						<outline text="console.log (&quot;\nnew item from tinyFeedReader: feedUrl == &quot; + feedUrl + &quot;, theItem == &quot; + JSON.stringify (theItem, undefined, 4) + &quot;\n&quot;);" created="Thu, 26 Jun 2025 15:29:57 GMT"/>
						<outline text="}" created="Thu, 26 Jun 2025 15:29:53 GMT"/>
						</outline>
					<outline text="};" created="Thu, 26 Jun 2025 15:34:55 GMT"/>
					</outline>
				<outline text="tinyfeedreader.start (options);" created="Thu, 26 Jun 2025 15:34:42 GMT"/>
				</outline>
			</outline>
		<outline text="build script" created="Thu, 26 Jun 2025 21:07:46 GMT">
			<outline text="nodeEditorSuite.utilities.buildTinyFeedReader ();"/>
			</outline>
		</body>
	</opml>
